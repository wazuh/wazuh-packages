name: pr-review
on: 
  pull_request:
    branches: [ 'poc-shellcheck-to4.3', 'poc-shellcheck-to4.3-1', 'master' ]

jobs:
  get-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.0
      - name: Set Artifacts
        uses: jitterbit/get-changed-files@v1
        id: changed_files
        with:
          format: 'csv'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: set cert
        if: contains(steps.changed_files.outputs.all, 'cert_tool')
        run: |
          if [ -z "${{ env.VAR }}" ]; then
            echo 'VAR=\"cert-tool\"' >> $GITHUB_ENV
          else
            echo 'VAR=${{ env.VAR }},\"cert-tool\"' >> $GITHUB_ENV
          fi
      - name: set password
        if: contains(steps.changed_files.outputs.all, 'passwords_tool')
        run: |
          if [ -z "${{ env.VAR }}" ]; then
            echo 'VAR=\"password-tool\"' >> $GITHUB_ENV
          else
            echo 'VAR=${{ env.VAR }},\"password-tool\"' >> $GITHUB_ENV
          fi
      - name: set install
        if: |
          contains(steps.changed_files.outputs.all, 'downloader') || 
          contains(steps.changed_files.outputs.all, 'install_functions')
        run: |
          if [ -z "${{ env.VAR }}" ]; then
            echo 'VAR=\"installer\"' >> $GITHUB_ENV
          else
            echo 'VAR=${{ env.VAR }},\"installer\"' >> $GITHUB_ENV
          fi
      - name: set all
        if: contains(steps.changed_files.outputs.all, 'common_functions')
        run: |
          echo 'VAR=\"cert-tool\",\"password-tool\",\"installer\"' >> $GITHUB_ENV
      - name: set builder
        if: contains(steps.changed_files.outputs.all, 'builder.sh')
        run: |
          if [ -z "${{ env.VAR }}" ]; then
            echo 'VAR=\"builder.sh\"' >> $GITHUB_ENV
          else
            echo 'VAR=${{ env.VAR }},\"builder.sh\"' >> $GITHUB_ENV
          fi
      - name: Build Matrix
        id: set-matrix
        run: |
          echo "::set-output name=tools_matrix::[${{ env.VAR }}]"
    outputs:
      tools_matrix: ${{ steps.set-matrix.outputs.tools_matrix }}
  
  Builder-Scripts:
    runs-on: ubuntu-latest
    needs: get-artifacts
    strategy:
      matrix: 
        tool: ${{ fromJson(needs.get-artifacts.outputs.tools_matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.1.0
      - name: Generate artifacts
        run: |
          if [ "${{ matrix.tool }}" != "builder.sh" ]; then
            bash unattended_installer/builder.sh --${{ matrix.tool }}
            pwd
            ls -la unattended_installer
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-generated
          path: |
            unattended_installer/**tool.sh
            !unattended_installer/**/*.md
          
  shellcheck:
    name: runner / shellcheck
    runs-on: ubuntu-latest
    needs: Builder-Scripts
    steps:
      - uses: actions/checkout@v1
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: actions/checkout@v1
        run: |
          ls -la
          ls -la artifacts-generated
          cat artifacts-generated/wazuh-certs-tool.sh
      - name: shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: "artifacts-generated"
          pattern: "*certs-tool.sh"
          exclude: "artifacts-generated/*.md"
          check_all_files_with_shebangs: "false"

